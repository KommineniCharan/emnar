name: Full Website Optimization & Lighthouse CI

on:
  push:
    branches: [ optimized ]
  workflow_dispatch:

jobs:
  optimize-and-audit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      # 1Ô∏è‚É£ Install all required CLI optimization tools (pin @squoosh/cli to 3.0.0)
      - name: Install dependencies
        run: |
          npm install -g html-minifier-terser clean-css-cli terser purgecss @squoosh/cli@3.0.0 cheerio uglify-js lighthouse

      # 2Ô∏è‚É£ Copy site to 'optimized' directory for safe processing (exclude optimized dir itself)
      - name: Copy site to optimized directory
        run: |
          mkdir -p optimized
          shopt -s extglob
          cp -r !(optimized) optimized/

      # 3Ô∏è‚É£ Minify HTML (PHP & HTML files)
      - name: Minify HTML files
        run: |
          find optimized -name "*.php" -o -name "*.html" | while read file; do
            html-minifier-terser --collapse-whitespace --remove-comments --minify-js true --minify-css true -o "$file" "$file"
          done

      # 4Ô∏è‚É£ Remove unused CSS and minify CSS
      - name: Purge and Minify CSS
        run: |
          purgecss --css optimized/css/*.css --content optimized/**/*.php optimized/**/*.html --output optimized/css
          for css in optimized/css/*.css; do
            cleancss -o "$css" "$css"
          done

      # 5Ô∏è‚É£ Minify JS
      - name: Minify JavaScript
        run: |
          for js in optimized/js/*.js; do
            uglifyjs "$js" -o "$js" --compress --mangle
          done

      # 6Ô∏è‚É£ Optimize images (WebP, AVIF, compress originals, responsive sizes)
      - name: Optimize images
        run: |
          for img in optimized/images/*.{png,jpg,jpeg}; do
            [ -f "$img" ] && npx @squoosh/cli --webp '{"quality":80}' --avif '{"quality":60}' "$img"
            [ -f "$img" ] && npx @squoosh/cli --resize '{"width":320}' "$img" -o "${img%.*}-320.${img##*.}"
            [ -f "$img" ] && npx @squoosh/cli --resize '{"width":640}' "$img" -o "${img%.*}-640.${img##*.}"
            [ -f "$img" ] && npx @squoosh/cli --resize '{"width":1024}' "$img" -o "${img%.*}-1024.${img##*.}"
          done

      # 7Ô∏è‚É£ Add lazy loading to <img> tags
      - name: Add lazy loading to images
        run: |
          find optimized -name "*.php" -o -name "*.html" | while read file; do
            node -e "
              const fs = require('fs');
              const cheerio = require('cheerio');
              let html = fs.readFileSync('$file', 'utf8');
              const $ = cheerio.load(html);
              $('img').each((_, el) => {
                if (!$(el).attr('loading')) $(el).attr('loading', 'lazy');
              });
              fs.writeFileSync('$file', $.html());
            "
          done

      # 8Ô∏è‚É£ Start local PHP server for Lighthouse
      - name: Start local server
        run: |
          php -S localhost:8080 -t optimized > /dev/null 2>&1 &
          sleep 5

      # 9Ô∏è‚É£ Auto-detect all HTML/PHP pages for Lighthouse
      - name: Detect pages for Lighthouse
        id: detect_pages
        run: |
          urls=()
          while IFS= read -r file; do
            relative_path="${file#optimized/}"
            urls+=("http://localhost:8080/$relative_path")
          done < <(find optimized -type f \( -name "*.php" -o -name "*.html" \))
          echo "urls=${urls[*]}" >> $GITHUB_OUTPUT

      # üîü Run Lighthouse on all detected pages
      - name: Run Lighthouse CI
        run: |
          IFS=' ' read -r -a url_array <<< "${{ steps.detect_pages.outputs.urls }}"
          for url in "${url_array[@]}"; do
            echo "Testing $url"
            lighthouse "$url" --output=json --output-path=./lhreport.json --only-categories=performance,accessibility,best-practices,seo
            score=$(jq '.categories.performance.score' lhreport.json)
            score=$(echo "$score * 100" | bc)
            if (( $(echo "$score < 90" | bc -l) )); then
              echo "Performance score for $url is below 90 ($score). Failing."
              exit 1
            fi
          done

      # 1Ô∏è‚É£1Ô∏è‚É£ Push optimized site to optimized branch
      - name: Push to optimized branch
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git checkout --orphan optimized
          git rm -rf .
          cp -r optimized/* .
          git add .
          git commit -m "Optimized site"
          git push -f origin optimized

      # 1Ô∏è‚É£2Ô∏è‚É£ Upload optimization and Lighthouse reports as artifacts
      - name: Upload Reports
        uses: actions/upload-artifact@v4
        with:
          name: optimization-lighthouse-reports
          path: |
            optimized/
            lhreport.json
