name: Full Website Optimization & Lighthouse CI

on:
  push:
    branches: [ optimized ]
  workflow_dispatch:

jobs:
  optimize-and-audit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 16

      - name: Setup Yarn
        run: npm install -g yarn

      - name: Install dependencies with Yarn
        run: |
          yarn add html-minifier-terser clean-css-cli terser purgecss cheerio uglify-js lighthouse jq bc
          yarn add @squoosh/cli@0.6.2

      - name: Copy site to optimized directory
        run: |
          mkdir -p optimized
          shopt -s extglob nullglob
          cp -r !(optimized) optimized/

      - name: Minify HTML files
        run: |
          find optimized \( -name "*.php" -o -name "*.html" \) | while read -r file; do
            npx html-minifier-terser --collapse-whitespace --remove-comments --minify-js true --minify-css true -o "$file" "$file"
          done

      - name: Purge and Minify CSS
        run: |
          npx purgecss --css optimized/css/*.css --content optimized/**/*.php optimized/**/*.html --output optimized/css
          for css in optimized/css/*.css; do
            npx cleancss -o "$css" "$css"
          done

      - name: Minify JavaScript
        run: |
          for js in optimized/js/*.js; do
            npx uglifyjs "$js" -o "$js" --compress --mangle
          done

      - name: Optimize images recursively with Squoosh
        run: |
          find optimized/images -type f \( -iname "*.png" -o -iname "*.jpg" -o -iname "*.jpeg" \) | while read -r img; do
            npx @squoosh/cli --webp '{"quality":80}' --avif '{"quality":60}' "$img" -d "$(dirname "$img")"
            for size in 320 640 1024; do
              output_dir="$(dirname "$img")/${size}w"
              mkdir -p "$output_dir"
              npx @squoosh/cli --resize "{\"width\":$size}" "$img" -d "$output_dir"
            done
          done

      - name: Add lazy loading to images in HTML/PHP files
        run: |
          find optimized \( -name "*.php" -o -name "*.html" \) | while read -r file; do
            npx node -e "
              const fs = require('fs');
              const cheerio = require('cheerio');
              let html = fs.readFileSync('$file', 'utf8');
              const \$ = cheerio.load(html);
              \$('img').each((_, el) => {
                if (!\$(el).attr('loading')) \$(el).attr('loading', 'lazy');
              });
              fs.writeFileSync('$file', \$.html());
            "
          done

      - name: Prune unused images
        run: |
          node js/prune-unused-images.js --root optimized

      - name: Start local PHP server
        run: |
          php -S localhost:8080 -t optimized > /dev/null 2>&1 &
          for i in {1..30}; do
            if curl -s http://localhost:8080 >/dev/null; then
              echo "Server is up!"
              break
            else
              echo "Waiting for server..."
              sleep 1
            fi
          done

      - name: Detect pages for Lighthouse
        id: detect_pages
        run: |
          urls=()
          while IFS= read -r file; do
            relative_path="${file#optimized/}"
            urls+=("http://localhost:8080/$relative_path")
          done < <(find optimized -type f \( -name "*.php" -o -name "*.html" \))
          echo "urls=$(printf '%s\n' "${urls[@]}" | jq -R . | jq -s .)" >> $GITHUB_OUTPUT

      - name: Run Lighthouse CI
        run: |
          urls=${{ steps.detect_pages.outputs.urls }}
          mapfile -t url_array < <(echo "$urls" | jq -r '.[]')
          mkdir -p lh_reports
          for i in "${!url_array[@]}"; do
            url="${url_array[i]}"
            echo "Testing $url"
            report_path="lh_reports/lhreport_$i.json"
            lighthouse "$url" --output=json --output-path="$report_path" --only-categories=performance,accessibility,best-practices,seo
            score=$(jq '.categories.performance.score' "$report_path")
            score=$(echo "$score * 100" | bc)
            echo "Performance score for $url: $score"
            if (( $(echo "$score < 90" | bc -l) )); then
              echo "Performance score for $url is below 90 ($score). Failing."
              exit 1
            fi
          done

      - name: Push to optimized branch
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git checkout --orphan optimized
          git rm -rf .
          cp -r optimized/* .
          git add .
          git commit -m "Optimized site"
          git push -f origin optimized

      - name: Upload Reports
        uses: actions/upload-artifact@v4
        with:
          name: optimization-lighthouse-reports
          path: |
            optimized/
            lh_reports/
            prune-report.json
