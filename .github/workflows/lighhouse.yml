name: Full Website Optimization & Lighthouse Audit

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  optimize-and-audit:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 16

      - name: Cache npm modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install optimization tools
        run: |
          npm install -g html-minifier-terser clean-css-cli terser purgecss @squoosh/cli cheerio @lhci/cli

      - name: Minify HTML
        run: |
          shopt -s nullglob
          find . \( -name "*.html" -o -name "*.php" \) | while read -r file; do
            html-minifier-terser --collapse-whitespace --remove-comments \
              --minify-js true --minify-css true \
              --input-dir "$(dirname "$file")" \
              --output-dir "$(dirname "$file")" \
              --file-ext html,php
          done

      - name: Purge & minify CSS
        run: |
          shopt -s nullglob
          if [ -d css ]; then
            find css -name "*.css" | while read -r file; do
              purgecss --css "$file" --content "**/*.php" "**/*.html" "**/*.js" --output css
              cleancss -o "$file" "$file"
            done
          fi

      - name: Minify JS
        run: |
          shopt -s nullglob
          if [ -d js ]; then
            find js -name "*.js" | while read -r file; do
              terser "$file" -o "$file" --compress --mangle
            done
          fi

      - name: Optimize images (WebP & AVIF)
        run: |
          mkdir -p optimized_images
          find images -type f \( -iname "*.png" -o -iname "*.jpg" -o -iname "*.jpeg" \) | while read -r img; do
            rel_path="${img#images/}"
            rel_dir=$(dirname "$rel_path")
            mkdir -p "optimized_images/$rel_dir"
            npx @squoosh/cli --webp '{"quality":80}' --avif '{"quality":60}' "$img" -d "optimized_images/$rel_dir"
          done
          rsync -a optimized_images/ images/

      - name: Add lazy loading to images
        run: |
          find . \( -name "*.html" -o -name "*.php" \) | while read -r file; do
            node -e "
              const fs = require('fs');
              const cheerio = require('cheerio');
              let html = fs.readFileSync('$file', 'utf8');
              const $ = cheerio.load(html);
              $('img').each((_, el) => {
                if (!$(el).attr('loading')) $(el).attr('loading', 'lazy');
              });
              fs.writeFileSync('$file', $.html());
            "
          done

      - name: Generate responsive images
        run: |
          find images -type f \( -iname "*.jpg" -o -iname "*.png" -o -iname "*.jpeg" \) | while read -r img; do
            rel_path="${img#images/}"
            rel_dir=$(dirname "$rel_path")
            for size in 320 640 1024; do
              mkdir -p "images/$rel_dir/${size}w"
              npx @squoosh/cli --resize "{\"width\":$size}" "$img" -d "images/$rel_dir/${size}w"
            done
          done

      - name: Start local PHP server
        run: |
          php -S localhost:8080 -t . > /dev/null 2>&1 &
          sleep 5

      - name: Run Lighthouse audits
        run: |
          urls=(
            "http://localhost:8080/index.php"
            "http://localhost:8080/about.php"
            "http://localhost:8080/contact.php"
          )
          for url in "${urls[@]}"; do
            echo "Running Lighthouse on $url"
            lhci collect --url="$url" --settings.chromeFlags="--headless"
            lhci assert --assertions.performance=90
          done

      - name: Push optimized site to optimized branch
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git checkout -B optimized
          git add .
          git commit -m "Optimized site" || echo "No changes to commit"
          git push origin optimized --force
